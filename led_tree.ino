#include <FrequencyTimer2.h>


const int ledPin =  12;      // the number of the LED pin
#define NUM_COLS 8
#define NUM_ROWS 7
#define SWITCH_PIN 10
int row_pins[NUM_ROWS] = {A0, A1, A2, A3, A4, A5, 13};
int col_pins[NUM_COLS] = {2, 3, 4, 5, 6, 7, 8, 9};
byte current_row = 0;

int current_frame = 0;
#if 0
#define NUM_FRAMES 2
#else
#define NUM_FRAMES 166
#endif
#define FRAME_SIZE NUM_ROWS
static const uint8_t frames[NUM_FRAMES][FRAME_SIZE] = 
{
#if 0
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}
#else
  {0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff},
  {0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff},
  {0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff},
  {0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff},
  {0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00},
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff},
  {0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
  {0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff},
  {0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff},
  {0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff},
  {0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff},
  {0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff},
  {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00},
  {0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
  {0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff},
  {0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff},
  {0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff},
  {0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff},
  {0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff},
  {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00},
  {0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
  {0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff},
  {0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff},
  {0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff},
  {0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff},
  {0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff},
  {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00},
  {0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
  {0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff},
  {0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff},
  {0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff},
  {0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff},
  {0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff},
  {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00},
  {0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
  {0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff},
  {0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff},
  {0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff},
  {0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff},
  {0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff},
  {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00},
  {0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},
  {0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40},
  {0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20},
  {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10},
  {0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08},
  {0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04},
  {0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02},
  {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01},
  {0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},
  {0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40},
  {0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20},
  {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10},
  {0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08},
  {0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04},
  {0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02},
  {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01},
  {0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},
  {0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40},
  {0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20},
  {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10},
  {0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08},
  {0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04},
  {0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02},
  {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01},
  {0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},
  {0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40},
  {0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20},
  {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10},
  {0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08},
  {0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04},
  {0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02},
  {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01},
  {0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},
  {0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40},
  {0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20},
  {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10},
  {0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08},
  {0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04},
  {0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02},
  {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01},
  {0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},
  {0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40},
  {0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20},
  {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10},
  {0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08},
  {0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04},
  {0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02},
  {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01},
  {0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80},
  {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40},
  {0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20},
  {0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10},
  {0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08},
  {0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04},
  {0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02},
  {0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01},
  {0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80},
  {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40},
  {0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20},
  {0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10},
  {0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08},
  {0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04},
  {0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02},
  {0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01},
  {0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80},
  {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40},
  {0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20},
  {0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10},
  {0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08},
  {0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04},
  {0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02},
  {0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01},
  {0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80},
  {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40},
  {0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20},
  {0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10},
  {0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08},
  {0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04},
  {0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02},
  {0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01},
  {0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80},
  {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40},
  {0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20},
  {0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10},
  {0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08},
  {0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04},
  {0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02},
  {0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01},
  {0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80},
  {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40},
  {0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20},
  {0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10},
  {0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08},
  {0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04},
  {0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02},
  {0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01}
  #endif
};

// Variables will change:
int ledState = LOW;             // ledState used to set the LED
long previousMillis = 0;        // will store last time LED was updated

// the follow variables is a long because the time, measured in miliseconds,
// will quickly become a bigger number than can be stored in an int.
long interval = 100;           // interval at which to blink (milliseconds)

void setup() {
  // set the digital pin as output:
  pinMode(ledPin, OUTPUT);      
  for (int i = 0; i < NUM_ROWS; i++)
  {
    pinMode(row_pins[i], OUTPUT);
    digitalWrite(row_pins[i], HIGH);
  }

  for (int i = 0; i < NUM_COLS; i++)
  {
    pinMode(col_pins[i], OUTPUT);
    digitalWrite(col_pins[i], LOW);
  }
  
  pinMode(SWITCH_PIN, INPUT);
  digitalWrite(SWITCH_PIN, HIGH);
  current_frame = 0;
  
  // Turn off toggling of pin 11
  FrequencyTimer2::disable();
  // Set refresh rate (interrupt timeout period)
  FrequencyTimer2::setPeriod(2000);
  // Set interrupt routine to be called
  FrequencyTimer2::setOnOverflow(display);

}

// Interrupt routine
void display() {
  
  digitalWrite(row_pins[current_row], HIGH);  // Turn whole previous column off
  current_row++;
  
  if (current_row == NUM_ROWS) {
    current_row = 0;
  }
  
  if (current_row == (NUM_ROWS - 1))
  {
    //Top row only has one LED
    if (frames[current_frame][current_row])
    {
      digitalWrite(row_pins[current_row], LOW); // Turn whole column on at once (for equal lighting times)     
    }
    else
    {
      digitalWrite(row_pins[current_row], HIGH); // Turn whole column on at once (for equal lighting times)
    }
    
  }
  else
  {
    for (int i = 0; i < NUM_COLS; i++)
    {
      if ((frames[current_frame][current_row] >> i) & 0x01)
      {
        digitalWrite(col_pins[i], HIGH);
      }
      else
      {
        digitalWrite(col_pins[i], LOW);
      }
    }
    digitalWrite(row_pins[current_row], LOW); // Turn whole column on at once (for equal lighting times)
  }
}

void loop()
{
  // here is where you'd put code that needs to be running all the time.

  // check to see if it's time to blink the LED; that is, if the 
  // difference between the current time and last time you blinked 
  // the LED is bigger than the interval at which you want to 
  // blink the LED.
  unsigned long currentMillis = millis();
  
  if (digitalRead(SWITCH_PIN) == 0)
  {
   current_frame =0; 
  }
 
  if(currentMillis - previousMillis > interval) {
    // save the last time you blinked the LED 
    previousMillis = currentMillis;   

    // if the LED is off turn it on and vice-versa:
    if (ledState == LOW)
      ledState = HIGH;
    else
      ledState = LOW;

    // set the LED with the ledState of the variable:
    digitalWrite(ledPin, ledState);
//      digitalWrite(A7, ledState);
    
    current_frame++;
    
    if (current_frame == NUM_FRAMES)
    {
      current_frame = 0;
    }
  }
}

